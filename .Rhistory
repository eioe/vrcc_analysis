"RPm1",
"RPm2",
"RPp1",
"RPp2",
"RRLength",
"dist2RPm1",
"dist2RPp1",
"relPosRR",
"relPosRRrad",
"isSystTrial"
)
export_df <- hansi[, cols]
if (!all(cols %in% colnames(fulldat))) {
fulldat[, cols] <- NA
}
fulldat[fulldat$who == subj_ID, cols] <- export_df[,]
return(fulldat)
fulldat[fulldat$who == subj_ID, cols] <- export_df[,]
add_case(export_df)
add_case(export_df, .before = 1)
? add_case
fpath <- paste0("/Data/VRTask/Cardio/Pilots/SETwithRPeaks/VRCC_",
subj_ID,
"_mrkrs.csv"
)
mrks <- read_delim(here(fpath), delim = '\t')
mrks <- mrks %>% select(latency, type)
mrks <- mrks %>% filter(type != 'boundary')
mrks$class[mrks$type == 'RP'] <- 'RP'
mrks$class[mrks$type == 'S 41'] <- 'stimOn'
mrks$class[mrks$type == 'S 42'] <- 'stimOff'
mrks$class[mrks$type == 'S 11'] <- 'trialStart'
mrks$class[mrks$type == 'S 44'] <- 'resp'
mrks$class[is.na(mrks$class)] <- 'stimID'
getID <- filter(mrks, class == 'stimID')
getAnim <- fulldat %>%
filter(who == subj_ID) %>%
select(Animal)
getAnim$Animal <- as_factor(getAnim$Animal)
getAnim <- droplevels(getAnim)
getAnim$trueType <- NA
for (A in levels(getAnim$Animal)) {
allIdx <- which(A == getAnim$Animal)
idx <- min(allIdx)
getAnim$trueType[allIdx] <- getID$type[idx]
}
# for P03 there's no ECG data for rounds 1& 2:
if (subj_ID == 'P03') {
skip_trials <- 240
} else {
skip_trials <- 0
}
minLength <- min(nrow(getID), nrow(getAnim))
while (sum(getID$type[1+skip_trials:minLength+skip_trials] != getAnim$trueType[1+skip_trials:minLength+skip_trials], na.rm = T)>0) {
delIdx <- min(which(getID$type[1:720] != getAnim$trueType))
if(getID$type[delIdx] == getID$type[delIdx-1]) {
if(abs(getID$latency[delIdx-1] - getID$latency[delIdx-2]) < 1000) {
delIdx <- delIdx-1
}
}
if (all(getID$type[(delIdx+1):(delIdx+5)] == getAnim$trueType[delIdx:(delIdx+4)])) {
getID <- getID[-delIdx, ]
} else if (all(getID$type[(delIdx-1):(delIdx+4)] == getAnim$trueType[delIdx:(delIdx+5)])){
getID <- add_case(getID,
.before = delIdx,
latency = mean(getID$latency[c(delIdx-1, delIdx)]),
type = getAnim$trueType[delIdx],
class = "stimID")
} else {
print('hansi')
}
minLength <- max(nrow(getID), nrow(getAnim))
}
hansi <- cbind(getID, getAnim[(1+skip_trials):(720-skip_trials), ])
getOns <- mrks %>%
filter(type == 'S 41')
getOffs <- mrks %>%
filter(type == 'S 42')
#
# diff <- length(hansi$latency) - length(getOns$latency)
# if (diff > 0) {
#   stimOn <- append(getOns$latency, rep(NA, diff))
# }
## Caution: this is only to be used for (dirty!) piloting data!
stimOn <- getOffs$latency - 100
hansi <- hansi %>% add_column(stimOn)
# while(sum(abs(hansi$latency - hansi$stimOn) > 2000, na.rm = T) > 0) {
#   idx <- min(which(abs(hansi$latency - hansi$stimOn) > 1000))
#   hansi$stimOn[(idx+1):length(hansi$stimOn)] <-
#     hansi$stimOn[idx:(length(hansi$stimOn)-1)]
#   hansi$stimOn[idx] <- getOffs$latency[idx] - 100
# }
if (nrow(getOffs) == nrow(hansi)) {
hansi$stimOff <- getOffs$latency
hansi <- hansi %>%
mutate(stimDur = stimOff - stimOn)
}
# find surrounding RPeaks:
RPeakLats <- mrks %>%
filter(type == 'RP')
for (i in 1:nrow(hansi)) {
idx <- max(which(RPeakLats$latency-hansi$stimOn[i] < 0))
hansi$RPm1[i] <- RPeakLats$latency[idx]
hansi$RPm2[i] <- RPeakLats$latency[idx-1]
hansi$RPp1[i] <- RPeakLats$latency[idx+1]
hansi$RPp2[i] <- RPeakLats$latency[idx+2]
}
hansi <- hansi %>%
mutate(RRLength = RPp1 - RPm1,
dist2RPm1 = stimOn - RPm1,
dist2RPp1 = RPp1 - stimOn,
relPosRR = dist2RPm1/RRLength,
relPosRRrad = relPosRR *2*pi,
isSystTrial = ifelse(dist2RPm1 < 300, TRUE, FALSE))
# add totTrial info:
if (skip_trials>1) {
for (i in 1:skip_trials) {
hansi <- add_case(hansi, .before = 1)
}
}
hansi <- rowid_to_column(hansi, var = "totTrial")
hansi$totTrial <- as.numeric(hansi$totTrial)
# add column with participant ID:
hansi <- add_column(hansi, who = as.factor(subj_ID), .after = "totTrial")
# export only relevant data to fulldat:
cols <- c("stimOn",
"stimOff",
"RPm1",
"RPm2",
"RPp1",
"RPp2",
"RRLength",
"dist2RPm1",
"dist2RPp1",
"relPosRR",
"relPosRRrad",
"isSystTrial"
)
export_df <- hansi[, cols]
# add info to fulldat (Animal col would not be necessary but is a control):
# fulldat <- semi_join(fulldat,
#                      export_df,
#                      by = c("totTrial", "who", "Animal")
#            )
if (!all(cols %in% colnames(fulldat))) {
fulldat[, cols] <- NA
}
fulldat[fulldat$who == subj_ID, cols] <- export_df[,]
View(fulldat)
plot(err ~ relPosRRrad, data = fulldat[fulldat$isFear, ])
plot(err ~ relPosRRrad, data = fulldat[fulldat$isFear, ])
plot(err ~ relPosRRrad, data = fulldat[!fulldat$isFear, ])
plot(err ~ relPosRRrad, data = fulldat[!fulldat$isFear, ])
plot(err ~ relPosRRrad, data = fulldat, col = isFear +2)
plot(err ~ relPosRRrad, data = fulldat, col = isFear +2)
summary(lm(err ~ relPosRRrad, data = fulldat, col = isFear +2))
summary(lm(err ~ relPosRRrad, data = fulldat))
summary(lm(err ~ relPosRRrad*isFear, data = fulldat))
summary(lm(err ~ isSysTrial*isFear, data = fulldat))
summary(lm(err ~ isSystTrial*isFear, data = fulldat))
summary(lm(err ~ isFear, data = fulldat))
isSystTrial*
boxplot(err ~ isSystTrial, data = fulldat)
boxplot(err ~ isSystTrial, data = fulldat)
## Influence of trueDistance:
lmErrDist <- lm(err ~ trueDist, data = fulldat)
plot(lmErrDist)
# studentized Breusch-Pagan test to test for homoscedasticity:
bptest(lmErrDist, data = fulldat)
# good!
summary(lmErrDist)
# ups...
plot(err ~ trueDist, data = fulldat)
errHist <- ggplot(fulldat, aes(x = err, fill = isFear)) +
geom_histogram(binwidth = 0.01, position = "identity", alpha = 0.5) +
xlim(-1, 1)  +
geom_density(alpha = 0.2) +
geom_vline(data=meansStim, aes(xintercept = meanErr, color = isFear),
linetype = 'dashed', size = 1) +
scale_fill_manual(values = c('blue', 'red')) +
scale_color_manual(values = c('blue', 'red')) +
labs(x = "Distance Error [m]") +
theme_classic()
errHist
? lm
? save
here
here()
# save RData
save(fulldat, file = here('Data/VRTask/Cardio/Pilots/fulldata_pilots.RData'))
require(ggplot2)
require(dplyr)
require(lmtest)
require(here)
# Load data sets:
# send me to VRCC dir:
VRCC_dir <- here()
# Set up the data directory
data_dir <- here("Data/VRTask/logfiles/Pilots")
dat <- NULL
data <- NULL
### Pilot 1 ###
dat <- read.table(file.path(data_dir, "VRCC_P01.txt"),
skip = 6,
header = T,
sep = ";",
na.string = "-1")
# cut to relevant columns:
dat <- dat[, c("trial",
"round",
"stimulus",
"isFearObject",
"estDistance",
"trueDistance"
)
]
colnames(dat) <- c("Trial",
"Round",
"Animal",
"isFear",
"estDist",
"trueDist"
)
dat <- dat[complete.cases(dat),]
dat$Animal <- as.factor(gsub(pattern = " \\(UnityEngine.GameObject\\)",
replacement = '',
dat$Animal)
)
dat$isFear <- as.logical(dat$isFear)
# save to list:
dat$who <- as.factor("P01")
data[[1]] <- dat
dat <- NULL
### Pilot 2 ###
dat <- read.table(file.path(data_dir, "VRCC_P02.txt"),
skip = 6,
header = T,
sep = ";",
na.string = "-1.00")
dat <- dat[dat$Phase == "Estimation", ]
dat <- dat[, c('Trial',
'Round',
'Stimulus',
'Fear.Object',
'Estimated.Distance',
'Real.Distance'
)
]
colnames(dat) <- c("Trial",
'Round',
"Animal",
"isFear",
"estDist",
"trueDist")
# drop unnecessary factor levels:
dat <- droplevels(dat)
# remove trials with incomplete data in relevant domains:
dat <- dat[complete.cases(dat),]
# get types right and correct trueDist for offset of playerPos:
dat$isFear <- as.logical(dat$isFear)
dat$estDist <- as.numeric(as.character(dat$estDist))
# correct for offset (corrected in later logfiles):
dat$trueDist <- as.numeric(as.character(dat$trueDist)) - 7
# save to list:
dat$who <- as.factor("P02")
data[[2]] <- dat
dat <- NULL
# merge data sets:
fulldat <- rbind(data[[1]], data[[2]])
dirs <- list.dirs(data_dir)[-1]
for (dir in dirs) {
dat <- NULL
data <- NULL
dat <-
read.table(
list.files(
path = dir,
pattern = '*_PlayerLog_*',
full.names = T),
skip = 6,
header = T,
sep = ";",
na.string = "-1.00")
# only one row per trial and ignore data from familiarization trials:
dat <- dat[dat$Phase == "Estimation" & dat$Round > 0, ]
dat <-dat[, c('Trial',
'Round',
'Stimulus',
'FearObject',
'EstimatedDistance',
'RealDistance'
)
]
colnames(dat) <- c('Trial',
'Round',
'Animal',
'isFear',
'estDist',
'trueDist'
)
# drop unnecessary factor levels:
dat <- droplevels(dat)
# remove trials with incomplete data in relevant domains:
dat <- dat[complete.cases(dat),]
# get types right:
dat$isFear <- as.logical(dat$isFear)
dat$estDist <- as.numeric(as.character(dat$estDist))
dat$trueDist <- as.numeric(as.character(dat$trueDist))
dat$who <- strsplit(dir, 'Pilots/')[[1]][2]
# merge with other data:
fulldat <- rbind(fulldat, dat)
}
# get trial/round data in order:
fulldat$Trial <- as.numeric(fulldat$Trial)
fulldat$Round <- as.numeric(fulldat$Round)
# add column with consecutively numbered trials (over rounds)
fulldat <- mutate(fulldat, totTrial = Trial + (Round-1)*120)
# get fear labels in order:
fulldat$isFear <- fulldat$isFear <- fulldat$Animal %in% c('Tarantula',
'FinalWolf',
'FinalSnake',
'Scorpio',
'FinalHyena')
# calc. error:
fulldat <- fulldat %>%
mutate(err = (estDist - trueDist),
errAbs = abs(err),
errNorm = err / trueDist,
errAbsNorm = abs(errNorm))
meansStim <- fulldat %>%
group_by(isFear) %>%
summarise(meanErr = mean(err),
meanErrNorm = mean(errNorm),
meanErrAbs = mean(errAbsNorm))
meansAnim <- fulldat %>%
group_by(Animal) %>%
summarise(meanErr = mean(err),
meanErrNorm = mean(errNorm),
meanErrAbs = mean(errAbsNorm))
source("add_cardio_info.R")
# for whom do we want to add cardio info:
# (skipping first 2 pilots as there's no (reasonable) cardio info for them )
#cardio_subjs <- levels(fulldat$who)[-2]
cardio_subjs <- c('P05', 'P04')
for (part in cardio_subjs) {
fulldat <- add_cardio_info(fulldat, part)
}
sum(fulldat$isFear)
sum(!fulldat$isFear)
## Influence of trueDistance:
lmErrDist <- lm(err ~ trueDist, data = fulldat)
plot(lmErrDist)
# studentized Breusch-Pagan test to test for homoscedasticity:
bptest(lmErrDist, data = fulldat)
# good!
summary(lmErrDist)
# ups...
plot(err ~ trueDist, data = fulldat)
errHist <- ggplot(fulldat, aes(x = err, fill = isFear)) +
geom_histogram(binwidth = 0.01, position = "identity", alpha = 0.5) +
xlim(-1, 1)  +
geom_density(alpha = 0.2) +
geom_vline(data=meansStim, aes(xintercept = meanErr, color = isFear),
linetype = 'dashed', size = 1) +
scale_fill_manual(values = c('blue', 'red')) +
scale_color_manual(values = c('blue', 'red')) +
labs(x = "Distance Error [m]") +
theme_classic()
errHist
boxplot(err ~ isSystTrial, data = fulldat)
lines(mean(fulldat$err[fulldat$isFear]), 0)
plot(err ~ relPosRRrad, data = fulldat[!fulldat$isFear, ])
plot(err ~ relPosRRrad, data = fulldat[fulldat$isFear, ])
plot(err ~ relPosRRrad, data = fulldat)
plot(err ~ relPosRRrad, data = fulldat, col = isFear+2)
lm(err ~ isFear + relPosRRrad, data = fulldat)
summary(lm(err ~ isFear + relPosRRrad, data = fulldat))
summary(lm(err ~ isFear, data = fulldat))
summary(lm(err ~ relPosRRrad, data = fulldat))
summary(lm(err ~ sin(relPosRRrad) + cos(relPosRRrad), data = fulldat))
summary(lm(err ~ sin(relPosRRrad) + cos(relPosRRrad) + isFear, data = fulldat))
summary(lm(err ~ (sin(relPosRRrad) + cos(relPosRRrad))* isFear, data = fulldat))
summary(lm(err ~ (sin(relPosRRrad) * cos(relPosRRrad))* isFear, data = fulldat))
sum(fulldat$isSystTrial)
sum(fulldat$isSystTrial, na.rm)
sum(fulldat$isSystTrial, na.rm = T)
sum(!fulldat$isSystTrial, na.rm = T)
mean(fulldat$RRLength)
mean(fulldat$RRLength, na.rm = T)
boxplot(err ~ Animal, data = fulldat)
bymedian <- with(fulldat, reorder(animal, -err, mean))
bymedian <- with(fulldat, reorder(Animal, -err, mean))
boxplot(err ~ bymedian, data = fulldat)
hf <- subset(fulldat[!fulldat$isSystTrial], sum(fulldat$isSystTrial))
hf <- subset(fulldat[!fulldat$isSystTrial, ], sum(fulldat$isSystTrial))
? subset
hf <- sample(fulldat[!fulldat$isSystTrial, ], sum(fulldat$isSystTrial))
hf <- sample(fulldat[!fulldat$isSystTrial, ], sum(fulldat$isSystTrial, na.rm = T))
sum(fulldat$isSystTrial, na.rm = T)
dim(fulldat[!fulldat$isSystTrial, ])
sample?
)
? sample
sample_n(fulldat[!fulldat$isSystTrial, ], sum(fulldat$isSystTrial, na.rm = T))
hf <- sample_n(fulldat[!fulldat$isSystTrial, ], sum(fulldat$isSystTrial, na.rm = T))
sum(fulldat$isSystTrial, na.rm = T)
dim(hf)
save(fulldat, file = here('Data/VRTask/Cardio/Pilots/fulldata_pilots.RData'))
summary(lm(err ~ (sin(relPosRRrad) + cos(relPosRRrad))* isFear, data = fulldat))
summary(lm(err ~ (sin(relPosRRrad) : cos(relPosRRrad))* isFear, data = fulldat))
summary(lm(err ~ (sin(relPosRRrad) + cos(relPosRRrad))* isFear, data = fulldat))
getwd()
here()
dd <- read.table(here('Data/VRTask/Logfiles/ExpSubjects/S02/S02_PlayerLog_11-27-18-22-02-2019.txt'), skip = 6,
header = T,
sep = ";",
na.string = "-1.00")
View(dd)
dd <- read.table(here('Data/VRTask/Logfiles/ExpSubjects/S02/S02_PlayerLog_11-27-18-22-02-2019.txt'), skip = 6,
header = T,
sep = ";",
na.string = "-1.00", row.names = F)
dd <- read.table(here('Data/VRTask/Logfiles/ExpSubjects/S02/S02_PlayerLog_11-27-18-22-02-2019.txt'), skip = 6,
header = T,
sep = ";",
na.string = "-1.00", row.names = FALSE)
View(dd)
dd <- read.table(here('Data/VRTask/Logfiles/ExpSubjects/S02/S02_PlayerLog_11-27-18-22-02-2019.txt'), skip = 6,
header = T,
sep = ";",
na.string = "-1.00")
dat <- dd
dat <- dat[dat$Phase == "Estimation" & dat$Round > 0, ]
View(dat)
max(dat$AngleErrDeg)
dat$DE <- dat$EstimatedDistance-dat$RealDistance
max(dat$DE)
min(dat$DE)
cor(DE~AngleError, data = dat)
lm(DE~AngleError, data = dat)
lm(DE~AngleErr, data = dat)
lm(DE~AngleErrDeg, data = dat)
cor(DE~AngleErrDeg, data = dat)
summary(lm(DE~AngleErrDeg, data = dat))
plot(DE~AngleErrDeg, data = dat)
mean(dat$AngleErrDeg)
mean(dat$DE)
as.numeric(dat$TruePosition[1])
as.numeric(as.character(dat$TruePosition[1]))
(as.character(dat$TruePosition[1]))
as.vector(as.character(dat$TruePosition[1]))
strsplit((as.character(dat$TruePosition[1])), ', ')
strsplit((as.character(dat$TruePosition[1])), c(', ', '('))
strsplit((as.character(dat$TruePosition[1])), c(', ', '\\('))
? strsplit
str_remove((as.character(dat$TruePosition[1])), c(',', '('))
str_remove((as.character(dat$TruePosition[1])), c(',', '('))
str_remove((as.character(dat$TruePosition[1])), "[,(]")
str_remove((as.character(dat$TruePosition[1])), "[,()]")
str_remove_all((as.character(dat$TruePosition[1])), "[,()]")
str_split((as.character(dat$TruePosition[1])), "[,()]")
ha <- str_remove_all((as.character(dat$TruePosition[1])), "[,()]")
ha
strsplit(ha, ' ')
as.vector(strsplit(ha, ' '))
ho <- as.vector(strsplit(ha, ' '))
ho - c(1, 2, 3)
ho <- as.vector(as.numeric(strsplit(ha, ' ')))
as.numeric(ho)
as.numeric(ho[[1]])
numHo <- as.numeric(ho[[1]])
numHo
numHo - c(1,2,3)
tp <- numHo
ep <- <- str_remove_all((as.character(dat$TruePosition[1])), "[,()]")
ep <- <- str_remove_all((as.character(dat$EstimatedPosition[1])), "[,()]")
ep <- str_remove_all((as.character(dat$EstimatedPosition[1])), "[,()]")
ep
ep <- str_split(ep, ' ')
ep
ep <- as.numeric(ep[[1]])
ep
tp-ep
sqrt(sum(tp)^2)
sqrt(sum(ep)^2)
View(dat)
sqrt(sum(ep^2))
sqrt(sum(tp^2))
sqrt(sum(ep^2)) - sqrt(sum(tp^2))
ep%*%tp
cos(ep%*%tp)
acos(ep%*%tp)
arccos(dot(A,B) / (|A|* |B|))
acos( sum(tp*ep) / ( sqrt(sum(ep * tp)) * sqrt(sum(ep * tp)) ) )
ep
tp
( sqrt(sum(ep * tp)) * sqrt(sum(ep * tp)) )
sum(tp*ep)
acos( sum(ep*tp) / ( sqrt(sum(ep * wp)) * sqrt(sum(tp * tp)) ) )
acos( sum(ep*tp) / ( sqrt(sum(ep * ep)) * sqrt(sum(tp * tp)) ) )
acos( sum(ep*tp) / ( sqrt(sum(ep * ep)) * sqrt(sum(tp * tp)) ) )/2*pi
acos( sum(ep*tp) / ( sqrt(sum(ep * ep)) * sqrt(sum(tp * tp)) ) )/2*pi*360
angle <- function(x,y){
dot.prod <- x%*%y
norm.x <- norm(x,type="2")
norm.y <- norm(y,type="2")
theta <- acos(dot.prod / (norm.x * norm.y))
as.numeric(theta)
}
angle(ep, tp)
angle(ep, tp)*180
angle(ep, tp)*180/pi

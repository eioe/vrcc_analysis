}
# cat(str(tables), '\n')
# cat('BINDING...')
bind_rows(tables)
}
# merge data sets:
# fulldat <- rbind(data[[1]], data[[2]])
fulldat_f <- build_dataset(data_dir)
warnings()
# Author         : Aleksander Molak
# Date           : May 4, 2019
###############################################################################
#                                                                             #
# This file contains a set of functions for reading and transforming the data #
#                                                                             #
###############################################################################
get_folders <- function(path) {
# We read files to get a list of all available data folders with participant's data (e.g. "S06", "S19")
list.files(path)
}
#---------------------------------------------------------------------------------------#
get_single_table <- function(path,
pattern = "(PlayerLog).*\\.txt$") {
# To get the data for a single participant we read-in and transform the data
in_file <- list.files(path,
pattern = pattern)
filepath <- file.path(path, in_file)
# In this read.table() call we deal with an artifact of data collection -
# an extra semicolon at the end of each data row (but not header).
# read.table() interprets the extra semicolon as an indicator that an extra col exists.
# That's why we need to use the scan() part - to manually adjust column names,
# preventing read_table() to interpret `Timestamp` column as `row.names`.
df <- read.table(filepath,
skip      = 7,
header    = F,
sep       = ";",
row.names = NULL,
na.string = "-1.0000",
col.names = c(scan(filepath,
what = "",
sep  = ";",
n    = 18,
skip = 6),
"!col_to_remove"))[-19]    # Beacuse of the data artifact we add this column
# to make # of cols consistent
# To make subjects identifiable we add ID to the table
df$ID <- substr(in_file, 1, 3)
df
}
#---------------------------------------------------------------------------------------#
filter_data <- function(df) {
# To get the rows relevant to the further analysis we filter the data
# according to the original criteria from `VRCC_behav_pilots.Rmd`
df %>% filter(Phase == "Estimation" &
Training == "False" &
Round > 0)
}
#---------------------------------------------------------------------------------------#
build_dataset <- function(path) {
# To get the full dataset we iterate over folders, read, transform and concatenate the data
folders <- get_folders(path)
tables  <- list()
for (i in seq_along(folders)) {
# cat("SEQ", i, '\n')
# cat(str(tables), '\n')
df <- get_single_table(file.path(path, folders[i]))
df <- filter_data(df)
# cat("DF", i, "dim:", dim(df), '\n')
tables[i] <- list(df)
}
# cat(str(tables), '\n')
# cat('BINDING...')
bind_rows(tables)
}
# merge data sets:
# fulldat <- rbind(data[[1]], data[[2]])
fulldat_f[2]
fulldat_f[2, ]
fulldat[2, ]
fulldat[1, ]
# merge data sets:
fulldat <- rbind(data[[2]], data[[1]])
fulldat[1]
fulldat[1, ]
fulldat[77]
fulldat[77,]
fulldat %>% filter(Timestamp == 857.3831, who == S06)
fulldat %>% filter(Timestamp == 857.3831, who == 'S06')
fulldat_f %>% filter(Timestamp == 857.3831, ID == 'S06')
fulldat[3,]
fulldat_f %>% filter(Timestamp == 519.6427, ID == 'S06')
fulldat %>% filter(Timestamp == 519.6427, ID == 'S06')
fulldat %>% filter(Timestamp == 519.6427, who == 'S06')
dim(fulldat_f)
knitr::opts_chunk$set(echo = TRUE)
source("Utils/get_cardio_info.R")
source("Utils/read_utils.R")
source("Utils\read_utils.r")
source("Utils\read_utils.r")
source("Utils/read_utils.r")
source("/Utils/read_utils.r")
source("./Utils/read_utils.r")
source(".\\Utils\\read_utils.r")
# Halper functions
source("get_cardio_info.R")
source("./Utils/read_utils.r")
# Halper functions
source("get_cardio_info.R")
# Utils
require(here)
require(haven)
require(readr)
require(tibble)
require(purrr)
# Plotting and tables
require(ggplot2)
require(sjPlot)
# Statistical tools
require(lme4)
require(lmtest)
require(lmerTest)
# Halper functions
source("./Utils/get_cardio_info.R")
source("./Utils/read_utils.r")
getwd()
# Helper functions
source("./Utils/get_cardio_info.R")
# Utils
require(here)
require(haven)
require(readr)
require(tibble)
require(purrr)
# Plotting and tables
require(ggplot2)
require(sjPlot)
# Statistical tools
require(lme4)
require(lmtest)
require(lmerTest)
# Send me to VRCC dir:
VRCC_dir <- here()
# Set up the data directory:
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Load helper functions
source("./Utils/get_cardio_info.R")
source("./Utils/read_utils.r")
VRCC_dir
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
source("./Code/Analyses/VRTask/Utils/read_utils.r")
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldat <- build_dataset(data_dir)
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
source("./Code/Analyses/VRTask/Utils/read_utils.r")
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldat <- build_dataset(data_dir)
# Utils
library(dplyr)
require(here)
require(haven)
require(readr)
require(tibble)
require(purrr)
# Plotting and tables
require(ggplot2)
require(sjPlot)
# Statistical tools
require(lme4)
require(lmtest)
require(lmerTest)
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
source("./Code/Analyses/VRTask/Utils/read_utils.r")
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldat <- build_dataset(data_dir)
# Utils
library(dplyr)
require(here)
require(haven)
require(readr)
require(tibble)
require(purrr)
# Plotting and tables
require(ggplot2)
require(sjPlot)
# Statistical tools
require(lme4)
require(lmtest)
require(lmerTest)
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
source("./Code/Analyses/VRTask/Utils/read_utils.r")
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldat <- build_dataset(data_dir)
View(fulldat)
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldata <- build_dataset(data_dir)
head(fulldata)
# Drop unused levels
fulldata <- droplevels(fulldata)
# Compute Errors
fulldat <- fulldat %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorAbsNorm = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))
View(fulldata)
# Drop unused levels
fulldata <- droplevels(fulldata)
# Compute Errors
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorAbsNorm = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))
View(fulldata)
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Drop unused levels
fulldata <- droplevels(fulldata)
# Compute Errors
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))
View(fulldata)
fulldata %>%
select(totTrial) %>%
unique()
fulldat %>%
group_by(FearObject) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm=T),
MeanDistanceErrorNorm = mean(DistanceErrorNorm, na.rm=T),
MeanDistanceErrorAbs = mean(DistanceErrorAbs), na.rm=T))
fulldat %>%
group_by(FearObject) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm=T),
MeanDistanceErrorNorm = mean(DistanceErrorNorm, na.rm=T),
MeanDistanceErrorAbs = mean(DistanceErrorAbs, na.rm=T))
fulldata %>%
group_by(FearObject) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm=T),
MeanDistanceErrorNorm = mean(DistanceErrorNorm, na.rm=T),
MeanDistanceErrorAbs = mean(DistanceErrorAbs, na.rm=T))
mean_dist_per_fear <- fulldata %>%
group_by(FearObject) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm=T),
MeanDistanceErrorNorm = mean(DistanceErrorNorm, na.rm=T),
MeanDistanceErrorAbs = mean(DistanceErrorAbs, na.rm=T))
mean_dist_per_animal <- fulldata %>%
group_by(Stimulus) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm=T),
MeanDistanceErrorNorm = mean(DistanceErrorNorm, na.rm=T),
MeanDistanceErrorAbs = mean(DistanceErrorAbs, na.rm=T))
mean_dist_per_fear
mean_dist_per_animal
get_cardio_info(fulldata, "S06")
cardio_dat_t <- get_cardio_info(fulldat, part)
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
get_folders(data_dir)
get_folders(data_dir)
get_folders(data_dir)
get_folders(data_dir)
get_folders(data_dir)
# for whom do we want to add cardio info:
# (skipping first 2 pilots as there's no (reasonable) cardio info for them )
#cardio_subjs <- levels(fulldat$who)[-2]
cardio_subjs <- c('S06','S19')
for (part in cardio_subjs) {                               # AM: put in a function
cardio_dat_t <- get_cardio_info(fulldat, part)
cardio_dat <- bind_rows(cardio_dat, cardio_dat_t)
}
for (part in cardio_subjs) {                               # AM: put in a function
cardio_dat_t <- get_cardio_info(fulldat, part)
cardio_dat <- bind_rows(cardio_dat, cardio_dat_t)
}
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
for (part in cardio_subjs) {                               # AM: put in a function
cardio_dat_t <- get_cardio_info(fulldat, part)
cardio_dat <- bind_rows(cardio_dat, cardio_dat_t)
}
cardio_subjs <- c('S06','S19')
cardio_dat <- NULL;
#### AM: BELOW: Type mismatch - `factor` and `character` vectors
for (part in cardio_subjs) {                               # AM: put in a function
cardio_dat_t <- get_cardio_info(fulldat, part)
cardio_dat <- bind_rows(cardio_dat, cardio_dat_t)
}
View(fulldat)
cardio_dat
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
fulldata %>% select(ID) %>% unique()
fulldata %>% select(ID) %>% distinct()
for (i in fulldata %>% select(ID) %>% distinct()) {cat(i)}
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list {
cardio_data <- bind_rows(cardio_data, get_cardio_info(fulldat, subject))
}
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list) {
cardio_data <- bind_rows(cardio_data, get_cardio_info(fulldat, subject))
}
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list) {
cat(subject)
cardio_data <- bind_rows(cardio_data, get_cardio_info(fulldata, subject))
}
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
# for whom do we want to add cardio info:
# (skipping first 2 pilots as there's no (reasonable) cardio info for them )
#cardio_subjs <- levels(fulldat$who)[-2]
cardio_subjs <- c('S19','S06')
cardio_dat <- NULL;
for (part in cardio_subjs) {                               # AM: put in a function
cardio_dat_t <- get_cardio_info(fulldat, part)
cardio_dat <- bind_rows(cardio_dat, cardio_dat_t)
}
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
source("./Utils/get_cardio_info.R")
# for whom do we want to add cardio info:
# (skipping first 2 pilots as there's no (reasonable) cardio info for them )
#cardio_subjs <- levels(fulldat$who)[-2]
cardio_subjs <- c('S19','S06')
cardio_dat <- NULL;
for (part in cardio_subjs) {                               # AM: put in a function
cardio_dat_t <- get_cardio_info(fulldat, part)
cardio_dat <- bind_rows(cardio_dat, cardio_dat_t)
}
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
fpath <- paste0("/Data/VRTask/Cardio/ExpSubjects/SETwithRPeaks/VRCC_",
subj_ID,
"_mrkrs.csv"
)
# for whom do we want to add cardio info:
# (skipping first 2 pilots as there's no (reasonable) cardio info for them )
#cardio_subjs <- levels(fulldat$who)[-2]
cardio_subjs <- c('S19','S06')
for (subject in cardio_subjs) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
cardio_data
fulldata %>%
select(ID) %>%
distinct()
list(fulldata %>%
select(ID) %>%
distinct())
fulldata %>%
select(ID) %>%
distinct()
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
some_frame= data.frame(a = c(1,4,5,9,3))
some_frame %>% select(a) %>% distinct()
# Utils
library(dplyr)
require(here)
require(haven)
require(readr)
require(tibble)
require(purrr)
# Plotting and tables
require(ggplot2)
require(sjPlot)
# Statistical tools
require(lme4)
require(lmtest)
require(lmerTest)
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
source("./Code/Analyses/VRTask/Utils/read_utils.r")
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Drop unused levels
fulldata <- droplevels(fulldata)
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
# Join the data
fulldata <- full_join(fulldata, cardio_data)
View(fulldata)
knitr::opts_chunk$set(echo = TRUE)
# Utils
library(dplyr)
require(here)
require(haven)
require(readr)
require(tibble)
require(purrr)
# Plotting and tables
require(ggplot2)
require(sjPlot)
# Statistical tools
require(lme4)
require(lmtest)
require(lmerTest)
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
source("./Code/Analyses/VRTask/Utils/read_utils.r")
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Drop unused levels
fulldata <- droplevels(fulldata)
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
# Join the data
fulldata <- full_join(fulldata, cardio_data)
View(fulldata)
dim(fulldata)

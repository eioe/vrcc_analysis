width = .2,
fill = cR) +
geom_half_boxplot(
data = d %>% filter(threat_f=="2"),
aes(x=threat_f, y = distance_error),
position = position_nudge(x = .15),
side = "r",
outlier.shape = NA,
center = TRUE,
errorbar.draw = FALSE,
width = .2,
fill = cB) +
geom_half_violin(
data = d %>% filter(threat_f=="1"),
aes(x = threat_f, y = distance_error),
position = position_nudge(x = -.3),
side = "l", fill = cR) +
geom_half_violin(
data = d %>% filter(threat_f=="2"),
aes(x = threat_f, y = distance_error),
position = position_nudge(x= .3),
side = "r",
fill = cB) +
geom_point(data = d %>% filter(threat_f=="1") %>%
filter(row_number() == 1),
aes(x = threat_f, y = m_threat),
position = position_nudge(x = .0),
color = darken(cR,0.3),
size = 5.5,
shape = 20) +
geom_point(data = d %>% filter(threat_f=="2") %>%
filter(row_number() == 1),
aes(x = threat_f, y = m_nonthreat),
position = position_nudge(x = -.0),
color = darken(cB, 0.3),
size = 5.5,
shape = 20) +
geom_line(data = tibble(x = c(1,2),
y = c(m_threat, m_nonthreat)),
aes(x = x, y = y)) +
scale_x_continuous(breaks=c(1,2),
labels=c("Threatening", "Non-threatening")) +
xlab("Type of animal") +
ylab("Distance Error (cm)") +
ggtitle('Threatening vs Non-threatening animals') +
theme_classic()+
coord_cartesian(ylim=c(min(d$distance_error), 90)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title = element_text(face="bold",
size=18.5,
colour = "black"),
axis.text = element_text(face="bold",
size=17,
colour = "black"))
f1
# save to disc:
fpath_figs <- file.path(VRCC_dir, 'Code', 'Analyses', 'VRTask', 'Figures')
fname <- file.path(fpath_figs, 'VRCC_DistErr_BoxViolin.pdf')
pdf(fname)
f1
dev.off()
###3.3 Plot results for different animals
# Overview box plot:
d <- data %>%
dplyr::group_by(ID, Stimulus) %>%
dplyr::summarize(distance_error = mean(DistanceError))
d <- spread(d, key = Stimulus, value = distance_error)
boxplot(d$Crocodile, d$FinalWolf, d$FinalSnake, d$Scorpio, d$Deer, d$Pig,  d$Turtle, d$Rabbit,
col = c(cR, cR, cR, cR, cB, cB, cB,cB),
names = c("Crocodile", "Wolf", "Snake", "Scorpio", "Deer", "Pig", "Turtle", "Rabbit"),
frame = FALSE,
notch = TRUE,
ylab = "Distance Error",
cex.lab = 1.4,
cex.axis = 1)
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
# pub-ready density plot:
data_avg <- data %>%
group_by(Stimulus, ID) %>%
dplyr::summarize(DistanceError = mean(DistanceError),
FearObject = first(FearObject)) %>%
mutate(Stimulus = revalue(Stimulus, c('FinalWolf'='Wolf',
'FinalSnake' = 'Snake',
'Scorpio' = 'Scorpion'))) %>%
ungroup()
ggplot(data_avg, aes(x = DistanceError,
y = fct_reorder(Stimulus, .x = DistanceError, .fun=mean),
fill = FearObject)) +
geom_density_ridges(aes(point_fill = factor(FearObject),
point_color= factor(FearObject)),
alpha = 0.9,
jittered_points = TRUE,
point_alpha=1,
point_shape=21,
stat = "density_ridges") +
theme_ridges() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_text(hjust = 0.5),  # Center x-axis label
axis.title.y = element_text(hjust = 0.5)) +
geom_vline(xintercept = 0, color = c_neutral) +
scale_fill_manual(values = c(c_nonthreat, c_threat)) +
scale_discrete_manual(aesthetics = "point_color", values = c("black", "black")) +
scale_discrete_manual(aesthetics = "point_fill", values = c(c_threat, c_nonthreat)) +
ylab("Stimulus animal") +
xlab("Distance error (°)") +
coord_flip() -> plt
# save to disc:
fpath_figs <- file.path(VRCC_dir, 'Code', 'Analyses', 'VRTask', 'Figures')
fname <- file.path(fpath_figs, 'VRCC_DistErr_RidgeDensity.pdf')
pdf(fname)
plt
dev.off()
## Density Plots:
c_threat <- cR  #"#FE5D9F"
c_nonthreat <- cB  # "#54426B"
c_neutral <- "#623CEA"
c_systole <- "#F686BD"
c_diastole <- "#F4BBD3"
data_sorted <- data %>%
group_by(Stimulus, ID) %>%
dplyr::summarize(DistanceError = mean(DistanceError),
FearObject = first(FearObject)) %>%
ungroup()
ggplot(data_sorted, aes(x = DistanceError, y = fct_reorder(Stimulus, .x = DistanceError, .fun=mean), fill = FearObject)) +
geom_density_ridges(alpha = 0.9,jittered_points = TRUE, point_alpha=1,point_shape=21, stat = "density_ridges") +
theme_ridges() +
theme(legend.position = "none") +
geom_vline(xintercept = 0, color = c_neutral) +
scale_fill_manual(values = c(c_threat, c_nonthreat)) +
coord_flip()
###3.2. Plot results - hypothesis 1
# specify colors
cR <- rgb(178/255, 31/255, 0/255)    # altern.: c_threat         # Old value: rgb(178/255, 31/255, 0/255)
cB <- rgb(10/255, 80/255, 200/255)   # altern.: c_nonthreat      # Old value:  rgb(10/255, 80/255, 200/255)
# prepare data
d <- data %>%
dplyr::group_by(ID) %>%
dplyr::summarize(mean_threat = mean(DistanceError[FearObject == "True"]),
mean_non_threat = mean(DistanceError[FearObject == "False"]))
d <- gather(d, threat, distance_error, mean_threat:mean_non_threat)
d$threat_f[d$threat == "mean_threat"] <- 1
d$threat_f[d$threat == "mean_non_threat"] <- 2
d$pos <- jitter(d$threat_f, amount=.03)
m_threat <- mean(d$distance_error[d$threat == "mean_threat"])
m_nonthreat <- mean(d$distance_error[d$threat == "mean_non_threat"])
# get standard deviations
score_sd_2 <- sd(d$distance_error[d$threat == "mean_non_threat"])
score_sd_1 <- sd(d$distance_error[d$threat == "mean_threat"])
# get standard errors
score_se_2 <- score_sd_2/sqrt(length(unique(d$ID)))
score_se_1 <- score_sd_1/sqrt(length(unique(d$ID)))
# get confidence intervals (95%)
score_ci_2 <- CI(d$distance_error[d$threat == "mean_non_threat"], ci = 0.95)
score_ci_1 <- CI(d$distance_error[d$threat == "mean_threat"], ci = 0.95)
ci <- c((score_ci_1[1] - score_ci_1[3]), (score_ci_2[1] - score_ci_2[3]))
# create ggplot
f1 <- ggplot(data = d, aes(y = distance_error)) +
#Add geom_() objects
geom_point(data = d %>% filter(threat_f =="1"),
aes(x = pos),
color = cR,
size = 1.5,
alpha = .4) +
geom_point(data = d %>% filter(threat_f =="2"),
aes(x = pos),
color = cB,
size = 1.5,
alpha = .4) +
geom_line(aes(x = pos, group = ID),
color = 'gray60',
alpha = .3) +
geom_half_boxplot(
data = d %>% filter(threat_f=="1"),
aes(x=threat_f, y = distance_error),
position = position_nudge(x = -.25),
side = "r",
outlier.shape = NA,
center = TRUE,
errorbar.draw = FALSE,
width = .2,
fill = cR) +
geom_half_boxplot(
data = d %>% filter(threat_f=="2"),
aes(x=threat_f, y = distance_error),
position = position_nudge(x = .15),
side = "r",
outlier.shape = NA,
center = TRUE,
errorbar.draw = FALSE,
width = .2,
fill = cB) +
geom_half_violin(
data = d %>% filter(threat_f=="1"),
aes(x = threat_f, y = distance_error),
position = position_nudge(x = -.3),
side = "l", fill = cR) +
geom_half_violin(
data = d %>% filter(threat_f=="2"),
aes(x = threat_f, y = distance_error),
position = position_nudge(x= .3),
side = "r",
fill = cB) +
geom_point(data = d %>% filter(threat_f=="1") %>%
filter(row_number() == 1),
aes(x = threat_f, y = m_threat),
position = position_nudge(x = .0),
color = darken(cR,0.3),
size = 5.5,
shape = 20) +
geom_point(data = d %>% filter(threat_f=="2") %>%
filter(row_number() == 1),
aes(x = threat_f, y = m_nonthreat),
position = position_nudge(x = -.0),
color = darken(cB, 0.3),
size = 5.5,
shape = 20) +
geom_line(data = tibble(x = c(1,2),
y = c(m_threat, m_nonthreat)),
aes(x = x, y = y)) +
scale_x_continuous(breaks=c(1,2),
labels=c("Threatening", "Non-threatening")) +
xlab("Type of animal") +
ylab("Distance Error (cm)") +
ggtitle('Threatening vs Non-threatening animals') +
theme_classic()+
coord_cartesian(ylim=c(min(d$distance_error), 90)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title = element_text(face="bold",
size=18.5,
colour = "black"),
axis.text = element_text(face="bold",
size=17,
colour = "black"))
f1
# save to disc:
fpath_figs <- file.path(VRCC_dir, 'Code', 'Analyses', 'VRTask', 'Figures')
fname <- file.path(fpath_figs, 'VRCC_DistErr_BoxViolin.pdf')
pdf(fname)
f1
dev.off()
###3.3 Plot results for different animals
# Overview box plot:
d <- data %>%
dplyr::group_by(ID, Stimulus) %>%
dplyr::summarize(distance_error = mean(DistanceError))
d <- spread(d, key = Stimulus, value = distance_error)
boxplot(d$Crocodile, d$FinalWolf, d$FinalSnake, d$Scorpio, d$Deer, d$Pig,  d$Turtle, d$Rabbit,
col = c(cR, cR, cR, cR, cB, cB, cB,cB),
names = c("Crocodile", "Wolf", "Snake", "Scorpio", "Deer", "Pig", "Turtle", "Rabbit"),
frame = FALSE,
notch = TRUE,
ylab = "Distance Error",
cex.lab = 1.4,
cex.axis = 1)
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
# pub-ready density plot:
data_avg <- data %>%
group_by(Stimulus, ID) %>%
dplyr::summarize(DistanceError = mean(DistanceError),
FearObject = first(FearObject)) %>%
mutate(Stimulus = revalue(Stimulus, c('FinalWolf'='Wolf',
'FinalSnake' = 'Snake',
'Scorpio' = 'Scorpion'))) %>%
ungroup()
ggplot(data_avg, aes(x = DistanceError,
y = fct_reorder(Stimulus, .x = DistanceError, .fun=mean),
fill = FearObject)) +
geom_density_ridges(aes(point_fill = factor(FearObject),
point_color= factor(FearObject)),
alpha = 0.9,
jittered_points = TRUE,
point_alpha=1,
point_shape=21,
stat = "density_ridges") +
theme_ridges() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_text(hjust = 0.5),  # Center x-axis label
axis.title.y = element_text(hjust = 0.5)) +
geom_vline(xintercept = 0, color = c_neutral) +
scale_fill_manual(values = c(c_nonthreat, c_threat)) +
scale_discrete_manual(aesthetics = "point_color", values = c("black", "black")) +
scale_discrete_manual(aesthetics = "point_fill", values = c(c_threat, c_nonthreat)) +
ylab("Stimulus animal") +
xlab("Distance error (°)") +
coord_flip() -> plt
# save to disc:
fpath_figs <- file.path(VRCC_dir, 'Code', 'Analyses', 'VRTask', 'Figures')
fname <- file.path(fpath_figs, 'VRCC_DistErr_RidgeDensity.pdf')
pdf(fname)
plt
dev.off()
## Density Plots:
c_threat <- cR  #"#FE5D9F"
c_nonthreat <- cB  # "#54426B"
c_neutral <- "#623CEA"
c_systole <- "#F686BD"
c_diastole <- "#F4BBD3"
data_sorted <- data %>%
group_by(Stimulus, ID) %>%
dplyr::summarize(DistanceError = mean(DistanceError),
FearObject = first(FearObject)) %>%
ungroup()
ggplot(data_sorted, aes(x = DistanceError, y = fct_reorder(Stimulus, .x = DistanceError, .fun=mean), fill = FearObject)) +
geom_density_ridges(alpha = 0.9,jittered_points = TRUE, point_alpha=1,point_shape=21, stat = "density_ridges") +
theme_ridges() +
theme(legend.position = "none") +
geom_vline(xintercept = 0, color = c_neutral) +
scale_fill_manual(values = c(c_threat, c_nonthreat)) +
coord_flip()
###3.2. Plot results - hypothesis 1
# specify colors
cR <- rgb(178/255, 31/255, 0/255)    # altern.: c_threat         # Old value: rgb(178/255, 31/255, 0/255)
cB <- rgb(10/255, 80/255, 200/255)   # altern.: c_nonthreat      # Old value:  rgb(10/255, 80/255, 200/255)
# prepare data
d <- data %>%
dplyr::group_by(ID) %>%
dplyr::summarize(mean_threat = mean(DistanceError[FearObject == "True"]),
mean_non_threat = mean(DistanceError[FearObject == "False"]))
d <- gather(d, threat, distance_error, mean_threat:mean_non_threat)
d$threat_f[d$threat == "mean_threat"] <- 1
d$threat_f[d$threat == "mean_non_threat"] <- 2
d$pos <- jitter(d$threat_f, amount=.03)
m_threat <- mean(d$distance_error[d$threat == "mean_threat"])
m_nonthreat <- mean(d$distance_error[d$threat == "mean_non_threat"])
# get standard deviations
score_sd_2 <- sd(d$distance_error[d$threat == "mean_non_threat"])
score_sd_1 <- sd(d$distance_error[d$threat == "mean_threat"])
# get standard errors
score_se_2 <- score_sd_2/sqrt(length(unique(d$ID)))
score_se_1 <- score_sd_1/sqrt(length(unique(d$ID)))
# get confidence intervals (95%)
score_ci_2 <- CI(d$distance_error[d$threat == "mean_non_threat"], ci = 0.95)
score_ci_1 <- CI(d$distance_error[d$threat == "mean_threat"], ci = 0.95)
ci <- c((score_ci_1[1] - score_ci_1[3]), (score_ci_2[1] - score_ci_2[3]))
# create ggplot
f1 <- ggplot(data = d, aes(y = distance_error)) +
#Add geom_() objects
geom_point(data = d %>% filter(threat_f =="1"),
aes(x = pos),
color = cR,
size = 1.5,
alpha = .4) +
geom_point(data = d %>% filter(threat_f =="2"),
aes(x = pos),
color = cB,
size = 1.5,
alpha = .4) +
geom_line(aes(x = pos, group = ID),
color = 'gray60',
alpha = .3) +
geom_half_boxplot(
data = d %>% filter(threat_f=="1"),
aes(x=threat_f, y = distance_error),
position = position_nudge(x = -.25),
side = "r",
outlier.shape = NA,
center = TRUE,
errorbar.draw = FALSE,
width = .2,
fill = cR) +
geom_half_boxplot(
data = d %>% filter(threat_f=="2"),
aes(x=threat_f, y = distance_error),
position = position_nudge(x = .15),
side = "r",
outlier.shape = NA,
center = TRUE,
errorbar.draw = FALSE,
width = .2,
fill = cB) +
geom_half_violin(
data = d %>% filter(threat_f=="1"),
aes(x = threat_f, y = distance_error),
position = position_nudge(x = -.3),
side = "l", fill = cR) +
geom_half_violin(
data = d %>% filter(threat_f=="2"),
aes(x = threat_f, y = distance_error),
position = position_nudge(x= .3),
side = "r",
fill = cB) +
geom_point(data = d %>% filter(threat_f=="1") %>%
filter(row_number() == 1),
aes(x = threat_f, y = m_threat),
position = position_nudge(x = .0),
color = darken(cR,0.3),
size = 5.5,
shape = 20) +
geom_point(data = d %>% filter(threat_f=="2") %>%
filter(row_number() == 1),
aes(x = threat_f, y = m_nonthreat),
position = position_nudge(x = -.0),
color = darken(cB, 0.3),
size = 5.5,
shape = 20) +
geom_line(data = tibble(x = c(1,2),
y = c(m_threat, m_nonthreat)),
aes(x = x, y = y)) +
scale_x_continuous(breaks=c(1,2),
labels=c("Threatening", "Non-threatening")) +
xlab("Type of animal") +
ylab("Distance Error (cm)") +
ggtitle('Threatening vs Non-threatening animals') +
theme_classic()+
coord_cartesian(ylim=c(min(d$distance_error), 90)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title = element_text(face="bold",
size=18.5,
colour = "black"),
axis.text = element_text(face="bold",
size=17,
colour = "black"))
f1
# save to disc:
fpath_figs <- file.path(VRCC_dir, 'Code', 'Analyses', 'VRTask', 'Figures')
fname <- file.path(fpath_figs, 'VRCC_DistErr_BoxViolin.pdf')
pdf(fname)
f1
dev.off()
###3.3 Plot results for different animals
# Overview box plot:
d <- data %>%
dplyr::group_by(ID, Stimulus) %>%
dplyr::summarize(distance_error = mean(DistanceError))
d <- spread(d, key = Stimulus, value = distance_error)
boxplot(d$Crocodile, d$FinalWolf, d$FinalSnake, d$Scorpio, d$Deer, d$Pig,  d$Turtle, d$Rabbit,
col = c(cR, cR, cR, cR, cB, cB, cB,cB),
names = c("Crocodile", "Wolf", "Snake", "Scorpio", "Deer", "Pig", "Turtle", "Rabbit"),
frame = FALSE,
notch = TRUE,
ylab = "Distance Error",
cex.lab = 1.4,
cex.axis = 1)
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
# pub-ready density plot:
data_avg <- data %>%
group_by(Stimulus, ID) %>%
dplyr::summarize(DistanceError = mean(DistanceError),
FearObject = first(FearObject)) %>%
mutate(Stimulus = revalue(Stimulus, c('FinalWolf'='Wolf',
'FinalSnake' = 'Snake',
'Scorpio' = 'Scorpion'))) %>%
ungroup()
ggplot(data_avg, aes(x = DistanceError,
y = fct_reorder(Stimulus, .x = DistanceError, .fun=mean),
fill = FearObject)) +
geom_density_ridges(aes(point_fill = factor(FearObject),
point_color= factor(FearObject)),
alpha = 0.9,
jittered_points = TRUE,
point_alpha=1,
point_shape=21,
stat = "density_ridges") +
theme_ridges() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_text(hjust = 0.5),  # Center x-axis label
axis.title.y = element_text(hjust = 0.5)) +
geom_vline(xintercept = 0, color = c_neutral) +
scale_fill_manual(values = c(c_nonthreat, c_threat)) +
scale_discrete_manual(aesthetics = "point_color", values = c("black", "black")) +
scale_discrete_manual(aesthetics = "point_fill", values = c(c_threat, c_nonthreat)) +
ylab("Stimulus animal") +
xlab("Distance error (°)") +
coord_flip() -> plt
plt
# save to disc:
fpath_figs <- file.path(VRCC_dir, 'Code', 'Analyses', 'VRTask', 'Figures')
fname <- file.path(fpath_figs, 'VRCC_DistErr_RidgeDensity.pdf')
pdf(fname)
plt
dev.off()
## Density Plots:
c_threat <- cR  #"#FE5D9F"
c_nonthreat <- cB  # "#54426B"
c_neutral <- "#623CEA"
c_systole <- "#F686BD"
c_diastole <- "#F4BBD3"
data_sorted <- data %>%
group_by(Stimulus, ID) %>%
dplyr::summarize(DistanceError = mean(DistanceError),
FearObject = first(FearObject)) %>%
ungroup()
ggplot(data_sorted, aes(x = DistanceError, y = fct_reorder(Stimulus, .x = DistanceError, .fun=mean), fill = FearObject)) +
geom_density_ridges(alpha = 0.9,jittered_points = TRUE, point_alpha=1,point_shape=21, stat = "density_ridges") +
theme_ridges() +
theme(legend.position = "none") +
geom_vline(xintercept = 0, color = c_neutral) +
scale_fill_manual(values = c(c_threat, c_nonthreat)) +
coord_flip()
? atan2
atan2(10, 1)
atan2(0.10, 1)
atan2(0.10, 1) * 180/pi
pi
1/2 * 180/pi
1/2 * pi/180
1/2 * 180/pi
1/2 * (180/pi)
(1/2)*(180/pi)
(1/2)*(pi/180)

library(tibble)
library(purrr)
# Plotting and tables
library(ggplot2)
library(sjPlot)
# Statistical tools
library(lme4)
library(lmtest)
library(lmerTest)
library(car)
install.packages("car")
# Utils
library(dplyr)
library(here)
library(haven)
library(readr)
library(tibble)
library(purrr)
# Plotting and tables
library(ggplot2)
library(sjPlot)
# Statistical tools
library(lme4)
library(lmtest)
library(lmerTest)
library(car)
# Load helper functions
source("./Code/Analyses/VRTask/Utils/get_cardio_info.R")
gwd()
getwd()
here()
# Load helper functions
source(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
source(here("./Code/Analyses/VRTask/Utils/read_utils.r"))
? build_dataset
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldata <- build_dataset(data_dir)
? build_dataset
getwd()
here()
setwd(here())
getwd()
file.edit("./Code/Analyses/VRTask/Utils/read_utils.r")
? seq_along
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
? scan
haha = c(1,2,3)
haha[-1]
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Utils
library(dplyr)
library(here)
library(haven)
library(readr)
library(tibble)
library(purrr)
# Plotting and tables
library(ggplot2)
library(sjPlot)
# Statistical tools
library(lme4)
library(lmtest)
library(lmerTest)
library(car)
# Load helper functions
source(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
source(here("./Code/Analyses/VRTask/Utils/read_utils.r"))
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
build_dataset()
source(here("./Code/Analyses/VRTask/Utils/read_utils.r"))
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
source(here("./Code/Analyses/VRTask/Utils/read_utils.r"))
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
View(fulldata)
# Drop unused levels
fulldata <- droplevels(fulldata)
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
?date("")
date("%d")
? date
Sys.Date()
fk
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
# Sun Jul 07 20:19:25 2019 ---
fk
paste("haha", "cc")
Sys.time("%d")
format(Sys.time(), "%d")
format(Sys.time(), "%d-%m-%y")
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
# **FK 07-07-19**: Labels the trials with sequential numbers over the whole experiment (normally/ideally same as row number but more secure as generated from actually logged data)
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
knitr::opts_chunk$set(echo = TRUE)
basic_color <- '#195e8c'
# Utils
library(dplyr)
library(here)
library(haven)
library(readr)
library(tibble)
library(purrr)
# Plotting and tables
library(ggplot2)
library(sjPlot)
# Statistical tools
library(lme4)
library(lmtest)
library(lmerTest)
library(car)
# Load helper functions
source(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
source(here("./Code/Analyses/VRTask/Utils/read_utils.r"))
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Drop unused levels
fulldata <- droplevels(fulldata)
View(fulldata)
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
# **FK 07-07-19**: Labels the trials with sequential numbers over the whole experiment
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
edit.file(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
file.edit(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
? recode
? dplyr.recode
? dplyr::recode
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
subj_ID <- "S06"
fpath <- paste0("/Data/VRTask/Cardio/ExpSubjects/SETwithRPeaks/VRCC_",
subj_ID,
"_mrkrs.csv"
)
# Get marker info from ECG file:
mrks <- read_delim(here(fpath), delim = '\t')
View(mrks)
mrks <- mrks %>%
select(latency, type) %>%
filter(type != 'boundary') %>%
mutate(class = dplyr::recode(type,
'RP' = 'RP',
'S 41'= 'stimOn',
'S 42' = 'stimOff',
'S 11' = 'trialStart',
'S 44' = 'resp',
'S  1' = 'stimID',
'S  2' = 'stimID',
'S  3' = 'stimID',
'S  4' = 'stimID',
'S  5' = 'stimID',
'S  6' = 'stimID',
'S  7' = 'stimID',
'S  8' = 'stimID',
.default = NA_character_
)
)
View(mrks)
# Get marker info from ECG file:
mrks <- read_delim(here(fpath), delim = '\t')
mrks <- mrks %>%
select(latency, type) %>%
filter(type != 'boundary') %>%
mutate(class = recode(type,
'RP' = 'RP',
'S 41'= 'stimOn',
'S 42' = 'stimOff',
'S 11' = 'trialStart',
'S 44' = 'resp',
'S  1' = 'stimID',
'S  2' = 'stimID',
'S  3' = 'stimID',
'S  4' = 'stimID',
'S  5' = 'stimID',
'S  6' = 'stimID',
'S  7' = 'stimID',
'S  8' = 'stimID',
.default = NA_character_
)
)
knitr::opts_chunk$set(echo = TRUE)
basic_color <- '#195e8c'
# Utils
library(dplyr)
library(here)
library(haven)
library(readr)
library(tibble)
library(purrr)
# Plotting and tables
library(ggplot2)
library(sjPlot)
# Statistical tools
library(lme4)
library(lmtest)
library(lmerTest)
library(car)
# Load helper functions
source(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
source(here("./Code/Analyses/VRTask/Utils/read_utils.r"))
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Drop unused levels
fulldata <- droplevels(fulldata)
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
# **FK 07-07-19**: Labels the trials with sequential numbers over the whole experiment (1-720)
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
knitr::opts_chunk$set(echo = TRUE)
basic_color <- '#195e8c'
# Utils
library(dplyr)
library(here)
library(haven)
library(readr)
library(tibble)
library(purrr)
# Plotting and tables
library(ggplot2)
library(sjPlot)
# Statistical tools
library(lme4)
library(lmtest)
library(lmerTest)
library(car)
# Load helper functions
source(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
source(here("./Code/Analyses/VRTask/Utils/read_utils.r"))
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Drop unused levels
fulldata <- droplevels(fulldata)
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
# **FK 07-07-19**: Labels the trials with sequential numbers over the whole experiment (1-720)
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
# Join the data
fulldata <- full_join(fulldata, cardio_data)
setNames()
? setNames()
setNames(list('haha','bebe'))
setNames(list('haha','bebe'), list(1,2))
glo <- setNames(list('haha','bebe'), list(1,2))
glo
class(glo)
glo <- setNames(list('haha','bebe'), list("muschi", "fuck"))
glo
rm(muschi)
rm(glo)
? unique
unique(c(1,2,3,5,4,5))
unique(c(1,3,1,5,4,5))
unique(c(3,1,5,4,5))
knitr::opts_chunk$set(echo = TRUE)
basic_color <- '#195e8c'
# Utils
library(dplyr)
library(here)
library(haven)
library(readr)
library(tibble)
library(purrr)
# Plotting and tables
library(ggplot2)
library(sjPlot)
# Statistical tools
library(lme4)
library(lmtest)
library(lmerTest)
library(car)
# Load helper functions
source(here("./Code/Analyses/VRTask/Utils/get_cardio_info.R"))
source(here("./Code/Analyses/VRTask/Utils/read_utils.r"))
# Set up the data directory
VRCC_dir <- here()
data_dir <- here("Data/VRTask/Logfiles/ExpSubjects/clean")
# Build the dataset
fulldata <- build_dataset(data_dir)
# Drop unused levels
fulldata <- droplevels(fulldata)
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
# **FK 07-07-19**: Labels the trials with sequential numbers over the whole experiment (1-720)
# Compute distance errors & add to the dataset
fulldata <- fulldata %>%
mutate(DistanceError = (EstimatedDistance - RealDistance),
DistanceErrorAbs = abs(DistanceError),
DistanceErrorNorm = DistanceError / RealDistance,
DistanceErrorNormAbs = abs(DistanceErrorNorm)) %>%
mutate(totTrial = Trial + (Round - 1) * max(Trial))          # **AM 05-05-19**: What's that?
# **FK 07-07-19**: Labels the trials with sequential numbers over the whole experiment (1-720)
subjects_list <- fulldata %>%
select(ID) %>%
distinct()
cardio_data   <- NULL
for (subject in subjects_list$ID) {
cardio_temp <- get_cardio_info(fulldata, subject)
cardio_data <- bind_rows(cardio_data, cardio_temp)
}
View(fulldata)
summarise(cardio_data)
View(cardio_data)
? full_join
# Join the data
fulldata <- full_join(fulldata, cardio_data)
# Check the distribution of DE
ggplot(fulldata, aes(x = DistanceError, fill = FearObject)) +
geom_histogram(alpha = .7) +
xlab('Distance Error') +
ylab('Value') +
theme_minimal()
qqPlot(fulldata$DistanceError)
shapiro.test(fulldata$DistanceError)
# Split the data
fear_true <- fulldata %>%
filter(FearObject == 'True') %>%
select(DistanceError) %>% pull
fear_flse <- fulldata %>%
filter(FearObject == 'False') %>%
select(DistanceError) %>% pull
# Perfom Wilcoxon signed-rank test
wilcox.test(fear_true, fear_flse, paired = T)
?pull
mean_error_per_fear <- fulldata %>%
group_by(FearObject) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm=T),
MeanDistanceErrorNorm = mean(DistanceErrorNorm, na.rm=T),
MeanDistanceErrorAbs = mean(DistanceErrorAbs, na.rm=T))
mean_error_per_animal <- fulldata %>%
group_by(Stimulus) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm=T),
MeanDistanceErrorNorm = mean(DistanceErrorNorm, na.rm=T),
MeanDistanceErrorAbs = mean(DistanceErrorAbs, na.rm=T))
mean_dist_per_fear
mean_error_per_fear <- fulldata %>%
group_by(FearObject) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm=T),
MeanDistanceErrorNorm = mean(DistanceErrorNorm, na.rm=T),
MeanDistanceErrorAbs = mean(DistanceErrorAbs, na.rm=T))
mean_error_per_animal <- fulldata %>%
group_by(Stimulus) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm=T),
MeanDistanceErrorNorm = mean(DistanceErrorNorm, na.rm=T),
MeanDistanceErrorAbs = mean(DistanceErrorAbs, na.rm=T))
mean_dist_per_fear
View(subjects_list)
# Split the data
fear_true <- fulldata %>%
filter(FearObject == 'True') %>%
select(DistanceError) %>% pull
fear_flse <- fulldata %>%
filter(FearObject == 'False') %>%
select(DistanceError) %>% pull
# Perfom Wilcoxon signed-rank test
wilcox.test(fear_true, fear_flse, paired = T)
mean(fear_true)
mean(fear_false)
mean(fear_flse)
fear_true <- fulldata %>%
filter(FearObject == 'True') %>%
select(DistanceError)
fear_true <- fulldata %>%
filter(FearObject == 'True') %>%
select(DistanceError) %>% pull
fear_true <- fulldata %>%
filter(FearObject == 'True') %>%
select(DistanceError)
View(fear_true)
mean_error_per_fear
mean_error_per_animal
View(fulldata)
fear_true <- fulldata %>%
filter(FearObject == 'True') %>%
select(DistanceError)
mean_error_per_card_pahase = fulldata %>%
group_by(isSystTrial) %>%
summarise(MeanDistanceError = mean(DistanceError, na.rm = T),
MeanDistanceErrorNorm = mean(DistanceErrorAbs, na.rm = T))
mean_error_per_card_pahase

ttestBF(d$m_systole, d$m_diastole, paired = T)
ttestBF(d$m_systole, d$m_diastole, paired = T, r = 1)
ttestBF(d$m_systole, d$m_diastole, paired = T, r = 0.354)
## Non-threatening animals
d <- data[data$FearObject == "False",]
d <- d[d$c_phase == "systole" | d$c_phase == "diastole", ]
# transform data
d <- d %>%
dplyr::group_by(ID) %>%
dplyr::summarize(
m_systole = mean(DistanceError[c_phase == "systole"]),
m_diastole = mean(DistanceError[c_phase == "diastole"])
)
# t-test (comparison of interest)
shapiro.test(d$m_systole)
shapiro.test(d$m_diastole)
t.test(d$m_systole, d$m_diastole, paired = T)
t.test(d$sd_systole, d$sd_diastole, paired = TRUE)
###4.3. Bayes factor analysis (comparisons of interest)
## Threatening animals
d <- data[data$FearObject == "True",]
d <- d[d$c_phase == "systole" | d$c_phase == "diastole", ]
# transform data
d <- d %>%
dplyr::group_by(ID) %>%
dplyr::summarize(m_systole  = mean(DistanceError[c_phase == "systole"]),
m_diastole = mean(DistanceError[c_phase == "diastole"]))
# t-test (comparison of interest)
shapiro.test(d$m_systole)
shapiro.test(d$m_diastole)
t.test(d$m_systole, d$m_diastole, paired = T)
# Bayes factor (comparison of interest + robustness check)
ttestBF(d$m_systole, d$m_diastole, paired = T)
ttestBF(d$m_systole, d$m_diastole, paired = T, r = 1)
ttestBF(d$m_systole, d$m_diastole, paired = T, r = 0.354)
## Non-threatening animals
d <- data[data$FearObject == "False",]
d <- d[d$c_phase == "systole" | d$c_phase == "diastole", ]
# transform data
d <- d %>%
dplyr::group_by(ID) %>%
dplyr::summarize(
m_systole = mean(DistanceError[c_phase == "systole"]),
m_diastole = mean(DistanceError[c_phase == "diastole"])
)
# t-test (comparison of interest)
shapiro.test(d$m_systole)
shapiro.test(d$m_diastole)
t.test(d$m_systole, d$m_diastole, paired = T)
# Bayes factor (comparison of interest + robustness check)
ttestBF(d$m_systole, d$m_diastole, paired = T)
ttestBF(d$m_systole, d$m_diastole, paired = T, r = 1)
ttestBF(d$m_systole, d$m_diastole, paired = T, r = 0.354)
###4.4. Vizualize the results
# Threatening
d <- data[data$FearObject == "True",]
d <- d[d$c_phase == "systole" | d$c_phase == "diastole", ]
# transform data
d <- d %>%
dplyr::group_by(ID) %>%
dplyr::summarize(
m_systole = mean(DistanceError[c_phase == "systole"]),
m_diastole = mean(DistanceError[c_phase == "diastole"]),
m_systole_ang = mean(AngularErrorDeg[c_phase == "systole"]),
m_diastole_ang = mean(AngularErrorDeg[c_phase == "diastole"])
)
# t-test (comparison of interest)
shapiro.test(d$m_systole)
shapiro.test(d$m_diastole)
shapiro.test(d$m_systole_ang)
shapiro.test(d$m_diastole_ang)
t.test(d$m_systole, d$m_diastole, paired = T)
t.test(d$m_systole_ang, d$m_diastole_ang, paired = TRUE)
d2 <- d
d2$diff <- d$m_diastole - d$m_systole
#hist(d2$diff, breaks = 20)
length(d2$diff[d2$diff < 0]) # closer at diastole
d <- gather(d, phase, distance_error, m_systole:m_diastole)
d$phase_f[d$phase == "m_systole"] <- 1
d$phase_f[d$phase == "m_diastole"] <- 2
d$pos <- jitter(d$phase_f, amount=.03)
# threatening
c_threat_sys <- lighten(c_threat, amount = 0.35)   #  "#6c030f"
c_threat_dias <- darken(c_threat, amount = 0.15)  # "#af7d81"
f1 <- ggplot(data = d, aes(y = distance_error)) +
geom_point(data = d %>% filter(phase_f =="1"), aes(x = pos), color = c_threat_sys, size = 1.5,
alpha = .5) +
geom_point(data = d %>% filter(phase_f =="2"), aes(x = pos), color = c_threat_dias, size = 1.5,
alpha = .5) +
geom_line(aes(x = pos, group = ID), color = 'gray60', alpha = .3) +
geom_half_boxplot(
data = d %>% filter(phase_f=="1"), aes(x=phase_f, y = distance_error), position = position_nudge(x = -.25),
side = "r",outlier.shape = NA, center = TRUE, errorbar.draw = FALSE, width = .2,
fill = c_threat_sys) +
geom_half_boxplot(
data = d %>% filter(phase_f=="2"), aes(x=phase_f, y = distance_error), position = position_nudge(x = .15),
side = "r",outlier.shape = NA, center = TRUE, errorbar.draw = FALSE, width = .2,
fill = c_threat_dias) +
geom_half_violin(
data = d %>% filter(phase_f=="1"),aes(x = phase_f, y = distance_error), position = position_nudge(x = -.3),
side = "l", fill = c_threat_sys) +
geom_half_violin(
data = d %>% filter(phase_f=="2"),aes(x = phase_f, y = distance_error), position = position_nudge(x= .3),
side = "r", fill = c_threat_dias) +
geom_point(data = d %>%
group_by(phase_f) %>%
dplyr::summarize(gm_DistErr = mean(distance_error)) %>%
mutate(col = factor(phase_f)),
#mutate(loc = if_else(c_phase == "systole", 1, 2)),
aes(x = phase_f, y = gm_DistErr, color = col),
position = position_nudge(x = -.0),
size = 5.5,
shape = 20) +
geom_line(data = d %>%
group_by(phase_f) %>%
dplyr::summarize(gm_DistErr = mean(distance_error)),
#mutate(loc = if_else(c_phase == "systole", 1, 2)),
aes(x = phase_f, y = gm_DistErr)) +
#Define additional settings
scale_x_continuous(breaks=c(1,2), labels=c("Systole", "Diastole")) +
scale_color_manual(values = c(c_threat_sys, c_threat_dias)) +
#Define additional settings
scale_x_continuous(breaks=c(1,2), labels=c("Systole", "Diastole")) +
xlab("Cardiac phase") + ylab("Distance Error") +
ggtitle('Threatening animals') +
theme_classic()+
coord_cartesian(ylim=c(-100, 80)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title = element_text(face="bold",size=18, colour = "black"), axis.text = element_text(face="bold",size=17, colour = "black"))
f1 # export size: 5 x 5
# save to disc:
fpath_figs <- file.path(VRCC_dir, 'Code', 'Analyses', 'VRTask', 'Figures')
fname <- file.path(fpath_figs, 'VRCC_DistErr_BoxViolin_CardiacPhase_Threat.pdf')
pdf(fname)
f1
dev.off()
### Non_threatening
c_nonthreat_sys <- lighten(c_nonthreat, amount = 0.35)   #  "#6c030f"   # darken(rgb(10/255, 80/255, 200/255),0.55)
c_nonthreat_dias <- darken(c_nonthreat, amount = 0.15)  # "#9590a8"
d <- data[data$FearObject == "False",]
d <- d[d$c_phase == "systole" | d$c_phase == "diastole", ]
d <- d %>%
dplyr::group_by(ID) %>%
dplyr::summarize(m_systole = mean(DistanceError[c_phase == "systole"]),
m_diastole = mean(DistanceError[c_phase == "diastole"]))
d2 <- d
d2$diff <- d$m_diastole - d$m_systole
#hist(d2$diff, breaks = 20)
length(d2$diff[d2$diff < 0])
d <- gather(d, phase, distance_error, m_systole:m_diastole)
d$phase_f[d$phase == "m_systole"] <- 1
d$phase_f[d$phase == "m_diastole"] <- 2
d$pos <- jitter(d$phase_f, amount=.03)
f2 <- ggplot(data = d, aes(y = distance_error)) +
#Add geom_() objects
geom_point(data = d %>% filter(phase_f =="1"), aes(x = pos), color = c_nonthreat_sys, size = 1.5,
alpha = .5) +
geom_point(data = d %>% filter(phase_f =="2"), aes(x = pos), color = c_nonthreat_dias, size = 1.5,
alpha = .5) +
geom_line(aes(x = pos, group = ID), color = 'gray60', alpha = .3) +
geom_half_boxplot(
data = d %>% filter(phase_f=="1"), aes(x=phase_f, y = distance_error), position = position_nudge(x = -.25),
side = "r",outlier.shape = NA, center = TRUE, errorbar.draw = FALSE, width = .2,
fill = c_nonthreat_sys) +
geom_half_boxplot(
data = d %>% filter(phase_f=="2"), aes(x=phase_f, y = distance_error), position = position_nudge(x = .15),
side = "r",outlier.shape = NA, center = TRUE, errorbar.draw = FALSE, width = .2,
fill = c_nonthreat_dias) +
geom_half_violin(
data = d %>% filter(phase_f=="1"),aes(x = phase_f, y = distance_error), position = position_nudge(x = -.3),
side = "l", fill = c_nonthreat_sys) +
geom_half_violin(
data = d %>% filter(phase_f=="2"),aes(x = phase_f, y = distance_error), position = position_nudge(x= .3),
side = "r",fill = c_nonthreat_dias) +
geom_point(data = d %>%
group_by(phase_f) %>%
dplyr::summarize(gm_DistErr = mean(distance_error)) %>%
mutate(col = factor(phase_f)),
#mutate(loc = if_else(c_phase == "systole", 1, 2)),
aes(x = phase_f, y = gm_DistErr, color = col),
position = position_nudge(x = -.0),
size = 5.5,
shape = 20) +
geom_line(data = d %>%
group_by(phase_f) %>%
dplyr::summarize(gm_DistErr = mean(distance_error)),
#mutate(loc = if_else(c_phase == "systole", 1, 2)),
aes(x = phase_f, y = gm_DistErr)) +
#Define additional settings
scale_x_continuous(breaks=c(1,2), labels=c("Systole", "Diastole")) +
scale_color_manual(values = c(c_nonthreat_sys, c_nonthreat_dias)) +
xlab("Cardiac phase") + ylab("Distance Error") +
ggtitle('Non-threatening animals') +
theme_classic()+
coord_cartesian(ylim=c(-100, 80)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title = element_text(face="bold",
size=18,
colour = "black"),
axis.text = element_text(face="bold",size=17, colour = "black"))
f2 # export size: 5 x 5
# save to disc:
fpath_figs <- file.path(VRCC_dir, 'Code', 'Analyses', 'VRTask', 'Figures')
fname <- file.path(fpath_figs, 'VRCC_DistErr_BoxViolin_CardiacPhase_NonThreat.pdf')
pdf(fname)
f2
dev.off()
# ANOVA plot:
d <- data %>%
filter(c_phase == "systole" | c_phase == "diastole") %>%
group_by(ID, c_phase, FearObject) %>%
dplyr::summarise(m_DistErr = mean(DistanceError)) %>%
mutate(c_phase = factor(c_phase,
levels = c("systole", "diastole"),
labels = c("Systole", "Diastole")),
FearObject = factor(FearObject,
levels = c( "True" , "False"),
labels = c("Threatening", "Non-threatening")),
Color = if_else(FearObject == "Threatening",
if_else(c_phase == "Systole",
c_threat_sys,
c_threat_dias),
if_else(c_phase == "Systole",
c_nonthreat_sys,
c_nonthreat_dias)))
f3 <- ggplot(data = d, aes(x = c_phase, y = m_DistErr, fill = Color)) +
geom_boxplot(aes(),
outlier.shape = NA,
center = TRUE, errorbar.draw = FALSE, width = .2) +
xlab("Cardiac phase") + ylab("Distance Error") +
theme_classic()+
scale_fill_manual(values = c(c_threat_sys, c_threat_dias, c_nonthreat_sys, c_nonthreat_dias),
name="") +
coord_cartesian(ylim=c(-70, 70)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title = element_text(face="bold",size=18, colour = "black"),
axis.text = element_text(face="bold",size=17, colour = "black"))
f3
# save to disc:
fpath_figs <- file.path(VRCC_dir, 'Code', 'Analyses', 'VRTask', 'Figures')
fname <- file.path(fpath_figs, 'VRCC_DistErr_BoxPlot_ANOVA.pdf')
pdf(fname)
f3
dev.off()
###4.5 Run preregistered analysis (circular approach)
# get circular components
rel_pos_circular <- get_circular_components(data$relPosRRrad, 2 * pi)
# add them to data
data$relPosRRradCircCos <- rel_pos_circular$cos_component
data$relPosRRradCircSin <- rel_pos_circular$sin_component
d <- data %>%
mutate(RealDistance = RealDistance * 0.01,
DistanceError = DistanceError * 0.01)
# null model
null_model <- lmer(DistanceError ~ 1 + (1 + RealDistance|ID), data = d, REML = FALSE)
summary(null_model)
# full model
full_model <- lmer(DistanceError ~ relPosRRradCircCos * FearObject + relPosRRradCircSin * FearObject + (1 + RealDistance|ID), data = d, REML = FALSE)
summary(full_model)
plot_model(full_model, type = "int", mdrt.values = "meansd")
get_r2_mlm(full_model)
# compare models
lrtest(null_model, full_model)
comparison <- anova(null_model, full_model)
print(comparison)
# for the GAM-based circular graphs see the additional separate code in Python.
###5.1. Item-by-item comparisons
# prepare data
d <- data[data$c_phase == "systole" | data$c_phase == "diastole", ]
d <- d %>%
dplyr::group_by(ID, Stimulus, c_phase) %>%
dplyr::summarize(distance_error = mean(DistanceError))
d <- spread(d, key = Stimulus, value = distance_error)
d <- pivot_wider(d, names_from = c(c_phase), values_from = c(Scorpio, Crocodile, FinalSnake, FinalWolf, Deer, Pig, Turtle, Rabbit))
## Threatening
# Scorpio
shapiro.test(d$Scorpio_diastole)
shapiro.test(d$Scorpio_systole)
t.test(d$Scorpio_systole, d$Scorpio_diastole, paired = T)
# Wolf
shapiro.test(d$FinalWolf_diastole)
shapiro.test(d$FinalWolf_systole)
wilcox.test(d$FinalWolf_systole, d$FinalWolf_diastole, paired = T)
# Snake
shapiro.test(d$FinalSnake_diastole)
shapiro.test(d$FinalSnake_systole)
t.test(d$FinalSnake_systole, d$FinalSnake_diastole, paired = T)
# Crocodile
shapiro.test(d$Crocodile_diastole)
shapiro.test(d$Crocodile_systole)
t.test(d$Crocodile_systole, d$Crocodile_diastole, paired = T)
# prepare graphics
par(mfrow=c(1,4))
c_threat_sys <- "#6c030f"
c_threat_dias <- "#af7d81"
boxplot(d$Crocodile_systole, d$Crocodile_diastole, col = c(c_threat_sys, c_threat_dias), names = c("Systole", "Diastole"), frame = FALSE, notch = TRUE, ylab = "Distance Error", cex.lab = 1.4, cex.axis = 1, ylim = c(-80,80), main = "Crocodile")
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
boxplot(d$FinalWolf_systole, d$FinalWolf_diastole, col = c(c_threat_sys, c_threat_dias), names = c("Systole", "Diastole"), frame = FALSE, notch = TRUE, ylab = "Distance Error", cex.lab = 1.4, cex.axis = 1, ylim = c(-80,80), main = "Wolf")
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
boxplot(d$FinalSnake_systole, d$FinalSnake_diastole, col = c(c_threat_sys, c_threat_dias), names = c("Systole", "Diastole"), frame = FALSE, notch = TRUE, ylab = "Distance Error", cex.lab = 1.4, cex.axis = 1, ylim = c(-80,80), main = "Snake")
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
boxplot(d$Scorpio_systole, d$Scorpio_diastole, col = c(c_threat_sys, c_threat_dias), names = c("Systole", "Diastole"), frame = FALSE, notch = TRUE, ylab = "Distance Error", cex.lab = 1.4, cex.axis = 1, ylim = c(-80,80), main = "Scorpio")
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
# export 3 x 7.5 cm
## Non-threatening
# Deer
shapiro.test(d$Deer_diastole)
shapiro.test(d$Deer_systole)
wilcox.test(d$Deer_systole, d$Deer_diastole, paired = T)
# Turtle
shapiro.test(d$Turtle_diastole)
shapiro.test(d$Turtle_systole)
t.test(d$Turtle_systole, d$Turtle_diastole, paired = T)
# Pig
shapiro.test(d$Pig_diastole)
shapiro.test(d$Pig_systole)
t.test(d$Pig_systole, d$Pig_diastole, paired = T)
# Rabbit
shapiro.test(d$Rabbit_diastole)
shapiro.test(d$Rabbit_systole)
t.test(d$Rabbit_systole, d$Rabbit_diastole, paired = T)
# prepare graphics
par(mfrow=c(1,4))
c_nonthreat_sys <- darken(rgb(10/255, 80/255, 200/255),0.55)
c_nonthreat_dias <- "#9590a8"
boxplot(d$Deer_systole, d$Deer_diastole, col = c(c_nonthreat_sys, c_nonthreat_dias), names = c("Systole", "Diastole"), frame = FALSE, notch = TRUE, ylab = "Distance Error", cex.lab = 1.4, cex.axis = 1, ylim = c(-80,80), main = "Deer")
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
boxplot(d$Pig_systole, d$Pig_diastole, col = c(c_nonthreat_sys, c_nonthreat_dias), names = c("Systole", "Diastole"), frame = FALSE, notch = TRUE, ylab = "Distance Error", cex.lab = 1.4, cex.axis = 1, ylim = c(-80,80), main = "Pig")
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
boxplot(d$Turtle_systole, d$Turtle_diastole, col = c(c_nonthreat_sys, c_nonthreat_dias), names = c("Systole", "Diastole"), frame = FALSE, notch = TRUE, ylab = "Distance Error", cex.lab = 1.4, cex.axis = 1, ylim = c(-80,80), main = "Turtle")
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
boxplot(d$Rabbit_systole, d$Rabbit_diastole, col = c(c_nonthreat_sys, c_nonthreat_dias), names = c("Systole", "Diastole"), frame = FALSE, notch = TRUE, ylab = "Distance Error", cex.lab = 1.4, cex.axis = 1, ylim = c(-80,80), main = "Rabbit")
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
# export 3 x 7.5 cm
###5.2. Plot distance errors in relation to true distances (animals split)
## Threatening animals
# prepare data
d <- data[data$c_phase == "systole" | data$c_phase == "diastole", ]
d <- d[d$FearObject == "True",]
# prepare graphics
c_threat_sys <- "#6c030f"
c_threat_dias <- "#af7d81"
bold.text <- element_text(face = "bold", color = "black")
# plot the resuls for different animals
for (p in unique(d$Stimulus)) {
subdata <- d[d$Stimulus == p,]
Figure <- ggplot(data = subdata, aes(x = RealDistance, y = DistanceError, color = c_phase)) + geom_smooth(method = "loess", level=0.95, alpha = 0.5, aes(fill=c_phase)) +
labs(y = "Distance Error", x = "True Distance") +
ggtitle(p) + scale_color_manual(values = c('systole' = c_threat_sys, 'diastole' = c_threat_dias)) + scale_fill_manual(values = c('systole' = c_threat_sys, 'diastole' = c_threat_dias)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 17), axis.text=element_text(size=17),  axis.title=element_text(size=18)) +
scale_x_continuous(limits= c(min(data$RealDistance), max(data$RealDistance)), expand = c(0.01,0.01)) + coord_cartesian(ylim=c(-50, 50)) + theme(axis.title = bold.text, axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)), axis.title.x =   element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
plot(Figure)
}
## Non-threatening animals
# prepare data
d <- data[data$c_phase == "systole" | data$c_phase == "diastole", ]
d <- d[d$FearObject == "False",]
# prepare graphics
c_nonthreat_sys <- darken(rgb(10/255, 80/255, 200/255),0.55)
c_nonthreat_dias <- "#9590a8"
# plot the results for different animals
for (p in unique(d$Stimulus)) {
subdata <- d[d$Stimulus == p,]
Figure <- ggplot(data = subdata, aes(x = RealDistance, y = DistanceError, color = c_phase)) + geom_smooth(method = "loess", level=0.95, alpha = 0.5, aes(fill=c_phase)) +
labs(y = "Distance Error", x = "True Distance") +
ggtitle(p) + scale_color_manual(values = c('systole' = c_nonthreat_sys, 'diastole' = c_nonthreat_dias)) + scale_fill_manual(values = c('systole' = c_nonthreat_sys, 'diastole' = c_nonthreat_dias)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 17), axis.text=element_text(size=17),  axis.title=element_text(size=18)) +
scale_x_continuous(limits= c(min(data$RealDistance), max(data$RealDistance)), expand = c(0.01,0.01)) + coord_cartesian(ylim=c(-50, 50)) + theme(axis.title = bold.text, axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)), axis.title.x =   element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
plot(Figure)
}
# Control analyses
# model width of distance error distributions as function of threat and cardiac phase
aov_d <- data %>%
filter(c_phase %in% c("diastole", "systole")) %>%
group_by(ID, FearObject, c_phase) %>%
dplyr::summarise(sd = sd(abs(DistanceError))) %>%
ungroup()
cat("\n\n### ANOVA – sd DISTANCE ERROR:\n")
fit_all <- aov_ez(data = aov_d,
dv = "sd",
id = "ID",
within=c("c_phase", "FearObject"),
return = afex_options("return_aov"),
anova_table = list(),
fun_aggregate = mean)
fit_all
summary(fit_all)
print(aov_d %>%
group_by(FearObject) %>%
dplyr::summarise(mean_sd = mean(sd),
sd_sd = sd(sd)))
# model angular error as function of threat and cardiac phase
aov_d <- data %>%
filter(c_phase %in% c("diastole", "systole")) %>%
group_by(ID, FearObject, c_phase) %>%
dplyr::summarise(m = mean(abs(AngularErrorDeg)),
sd = sd(AngularErrorDeg)) %>%
ungroup()
cat("\n\n### ANOVA – mean ANG ERROR\n")
fit_all <- aov_ez(data = aov_d,
dv = "m",
id = "ID",
within=c("c_phase", "FearObject"),
return = afex_options("return_aov"),
anova_table = list(),
fun_aggregate = mean)
fit_all
summary(fit_all)
cat("\n\n### ANOVA – sd ANG ERROR\n")
fit_all <- aov_ez(data = aov_d,
dv = "sd",
id = "ID",
within=c("c_phase", "FearObject"),
return = afex_options("return_aov"),
anova_table = list(),
fun_aggregate = mean)
fit_all
summary(fit_all)
print(aov_d %>%
group_by(FearObject) %>%
dplyr::summarise(grand_m = mean(m),
grand_sd = sd(m),
mean_sd = mean(sd),
sd_sd = sd(sd)))
# 3.3 Exploratory/control analysis: compare angular error between threat and non-threat
d <- data %>%
dplyr::group_by(ID) %>%
dplyr::summarize(mean_threat = mean(AngularErrorDeg[FearObject == "True"]),
mean_non_threat = mean(AngularErrorDeg[FearObject == "False"]))
# check normality of distributions
shapiro.test(d$mean_threat)
shapiro.test(d$mean_non_threat)
# perform paired t-test
t.test(d$mean_threat, d$mean_non_threat, alt = "two.sided", conf = 0.95, paired = T)
# calculate Cohen's d
effsize::cohen.d(d$mean_threat, d$mean_non_threat, paired = T)
# show summary statistics
describe(d$mean_threat)
describe(d$mean_non_threat)
d <- data %>%
dplyr::group_by(ID, FearObject) %>%
dplyr::summarize(sd_AngErr = sd(AngularErrorDeg),
sd_DistErr = sd(DistanceError),
) %>%
ungroup()
# check normality of distributions
shapiro.test(d$sd_AngErr[d$FearObject=="True"])
shapiro.test(d$sd_AngErr[d$FearObject=="False"])
t.test(d$sd_AngErr[d$FearObject=="True"], d$sd_AngErr[d$FearObject=="False"], paired = TRUE, alternative = "two.sided")
# Show means:
d %>% group_by(FearObject) %>%
dplyr::summarise(gmean_AngErrDeg = mean(mean_AngErr),
gmean_DistErr = mean(mean_DistErr),
meansd_AngErrDeg = mean(sd_AngErr),
meansd_DistErr = mean(sd_DistErr)
) -> summary_AngDistErr
# 3.3 Exploratory/control analysis: compare angular error between threat and non-threat
d <- data %>%
dplyr::group_by(ID) %>%
dplyr::summarize(mean_threat = mean(AngularErrorDeg[FearObject == "True"]),
mean_non_threat = mean(AngularErrorDeg[FearObject == "False"]))
# check normality of distributions
shapiro.test(d$mean_threat)
shapiro.test(d$mean_non_threat)
# perform paired t-test
t.test(d$mean_threat, d$mean_non_threat, alt = "two.sided", conf = 0.95, paired = T)
# calculate Cohen's d
effsize::cohen.d(d$mean_threat, d$mean_non_threat, paired = T)
# show summary statistics
describe(d$mean_threat)
describe(d$mean_non_threat)
d <- data %>%
dplyr::group_by(ID, FearObject) %>%
dplyr::summarize(mean_AngErr = mean(AngularErrorDeg),
mean_DistErr = mean(DistanceError),
sd_AngErr = sd(AngularErrorDeg),
sd_DistErr = sd(DistanceError),
) %>%
ungroup()
# check normality of distributions
shapiro.test(d$sd_AngErr[d$FearObject=="True"])
shapiro.test(d$sd_AngErr[d$FearObject=="False"])
t.test(d$sd_AngErr[d$FearObject=="True"], d$sd_AngErr[d$FearObject=="False"], paired = TRUE, alternative = "two.sided")
# Show means:
d %>% group_by(FearObject) %>%
dplyr::summarise(gmean_AngErrDeg = mean(mean_AngErr),
gmean_DistErr = mean(mean_DistErr),
meansd_AngErrDeg = mean(sd_AngErr),
meansd_DistErr = mean(sd_DistErr)
) -> summary_AngDistErr
print(summary_AngDistErr)
###3.3 Plot results for different animals
d <- data %>%
dplyr::group_by(ID, Stimulus) %>%
dplyr::summarize(angular_error = mean(AngularErrorDeg))
d <- spread(d, key = Stimulus, value = angular_error)
boxplot(d$Crocodile, d$FinalWolf, d$FinalSnake, d$Scorpio, d$Deer, d$Pig,  d$Turtle, d$Rabbit,
col = c(cR, cR, cR, cR, cB, cB, cB,cB),
names = c("Crocodile", "Wolf", "Snake", "Scorpio", "Deer", "Pig", "Turtle", "Rabbit"),
frame = FALSE,
notch = TRUE,
ylab = "Angular Error",
cex.lab = 1.4,
cex.axis = 1)
abline(h=0, col="gray20", lwd = 1.3, lty = 2)
